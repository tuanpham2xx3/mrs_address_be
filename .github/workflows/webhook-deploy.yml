# Auto deployment workflow for webhook server
name: Auto Webhook Deploy

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    name: Deploy via Webhook
    runs-on: ubuntu-latest
    # Removed environment dependency to allow automatic deployment
    # environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "WORK_DIR=/opt/mrs-address-be" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "WORK_DIR=/opt/mrs-address-be-staging" >> $GITHUB_ENV
          fi

      - name: Deploy via Webhook
        run: |
          # Create GitHub webhook payload (compact format để tránh whitespace issues)
          PAYLOAD_JSON=$(cat << 'EOF'
{
  "ref": "${{ github.ref }}",
  "repository": {
    "name": "${{ github.event.repository.name }}",
    "full_name": "${{ github.repository }}",
    "owner": {
      "login": "${{ github.repository_owner }}"
    },
    "default_branch": "${{ github.event.repository.default_branch }}"
  },
  "head_commit": {
    "id": "${{ github.sha }}",
    "message": "${{ github.event.head_commit.message || 'Manual deployment' }}",
    "author": {
      "name": "${{ github.event.head_commit.author.name || github.actor }}",
      "email": "${{ github.event.head_commit.author.email || format('{0}@users.noreply.github.com', github.actor) }}"
    },
    "modified": [],
    "added": [],
    "removed": []
  }
}
EOF
)
          
          # Write payload to file - compact format
          echo "$PAYLOAD_JSON" | jq -c . > webhook_payload.json
          
          # Debug payload
          echo "=== WEBHOOK PAYLOAD ==="
          cat webhook_payload.json | jq .
          echo "======================="
          
          # Generate HMAC SHA256 signature (theo chuẩn WEBHOOK_CI_CD_GUIDE.md)
          WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}"
          if [ -z "$WEBHOOK_SECRET" ]; then
            echo "❌ WEBHOOK_SECRET not found in GitHub secrets"
            exit 1
          fi
          
          echo "=== SIGNATURE GENERATION ==="
          echo "Secret length: ${#WEBHOOK_SECRET}"
          
          # Use openssl to generate signature (chuẩn GitHub webhook)
          SIGNATURE=$(openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" webhook_payload.json | cut -d' ' -f2)
          FULL_SIGNATURE="sha256=$SIGNATURE"
          
          echo "Generated signature: $FULL_SIGNATURE"
          echo "==============================="
          
          # Send webhook request với headers chuẩn GitHub
          echo "=== SENDING WEBHOOK REQUEST ==="
          echo "URL: ${{ secrets.WEBHOOK_URL || 'https://webhook1.iceteadev.site/deploy' }}"
          echo "Headers:"
          echo "  Content-Type: application/json"
          echo "  X-Hub-Signature-256: $FULL_SIGNATURE"
          echo "  X-GitHub-Event: push"
          echo "  X-GitHub-Delivery: ${{ github.run_id }}-${{ github.run_number }}"
          echo "==============================="
          
          RESPONSE=$(curl -w "\n%{http_code}" -X POST "${{ secrets.WEBHOOK_URL || 'https://webhook1.iceteadev.site/deploy' }}" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: $FULL_SIGNATURE" \
            -H "X-GitHub-Event: push" \
            -H "X-GitHub-Delivery: ${{ github.run_id }}-${{ github.run_number }}" \
            -H "User-Agent: GitHub-Hookshot/${{ github.run_id }}" \
            -d @webhook_payload.json)
          
          # Parse response
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "=== WEBHOOK RESPONSE ==="
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          echo "========================"
          
          # Check if request was successful
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ Webhook deployment successful!"
            echo "Environment: ${{ env.DEPLOY_ENV }}"
            echo "Repository: ${{ github.repository }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
          else
            echo "❌ Webhook deployment failed!"
            echo "HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            
            # Debug information for signature issues
            if [ "$HTTP_CODE" -eq 401 ]; then
              echo ""
              echo "=== SIGNATURE DEBUG INFO ==="
              echo "This is likely a signature verification issue."
              echo "Check:"
              echo "1. WEBHOOK_SECRET in GitHub secrets matches webhook server"
              echo "2. Webhook server implements signature verification correctly"
              echo "3. Payload format matches expected GitHub webhook format"
              echo "============================"
            fi
            
            exit 1
          fi

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          sleep 30
          
          # Test if the service is running (adjust URL as needed)
          if [ "${{ env.DEPLOY_ENV }}" == "production" ]; then
            HEALTH_URL="https://api.mrs-address-be.your-domain.com/health"
          else
            HEALTH_URL="https://staging-api.mrs-address-be.your-domain.com/health"
          fi
          
          echo "Testing health endpoint: $HEALTH_URL"
          
          # Try to reach the health endpoint
          for i in {1..10}; do
            echo "Health check attempt $i..."
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Service is healthy!"
              break
            else
              echo "⏳ Service not ready yet, waiting..."
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "⚠️ Service health check failed after 10 attempts"
              echo "This might be expected if health endpoint is not configured"
            fi
          done

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Working Directory**: ${{ env.WORK_DIR }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Webhook URL**: ${{ secrets.WEBHOOK_URL || 'https://webhook1.iceteadev.site/deploy' }}" >> $GITHUB_STEP_SUMMARY
          
          # Add debug info if deployment failed
          if [ "$?" -ne 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ⚠️ Debug Info" >> $GITHUB_STEP_SUMMARY
            echo "- Check GitHub secrets: WEBHOOK_SECRET, WEBHOOK_URL" >> $GITHUB_STEP_SUMMARY
            echo "- Verify webhook server signature verification" >> $GITHUB_STEP_SUMMARY
            echo "- Check deployment commands configuration" >> $GITHUB_STEP_SUMMARY
          fi 