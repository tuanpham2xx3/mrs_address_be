name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== CI JOBS =====
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run go vet
        run: go vet ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly"
            gofmt -s -l .
            exit 1
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        run: make build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vietnam-admin-api-${{ github.sha }}
          path: vietnam-admin-api

  # ===== DOCKER BUILD =====
  
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ===== DEPLOYMENT JOBS =====

  webhook-deploy:
    name: Deploy via Webhook
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Docker Image Info
        id: image_info
        run: |
          echo "üê≥ Getting Docker image information..."
          
          # T·∫°o image tags gi·ªëng nh∆∞ trong docker-build job
          REGISTRY="${{ env.REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          BRANCH_NAME="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"
          
          # X√°c ƒë·ªãnh image tag d·ª±a tr√™n branch (gi·ªëng docker-build)
          if [ "$BRANCH_NAME" == "main" ]; then
            IMAGE_TAG="latest"
            VERSIONED_TAG="main-${COMMIT_SHA:0:7}"
          else
            IMAGE_TAG="$BRANCH_NAME"
            VERSIONED_TAG="$BRANCH_NAME-${COMMIT_SHA:0:7}"
          fi
          
          FULL_IMAGE_NAME="$REGISTRY/$IMAGE_NAME"
          LATEST_IMAGE="$FULL_IMAGE_NAME:$IMAGE_TAG"
          VERSIONED_IMAGE="$FULL_IMAGE_NAME:$VERSIONED_TAG"
          
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "versioned_tag=$VERSIONED_TAG" >> $GITHUB_OUTPUT
          echo "latest_image=$LATEST_IMAGE" >> $GITHUB_OUTPUT
          echo "versioned_image=$VERSIONED_IMAGE" >> $GITHUB_OUTPUT
          
          echo "=== DOCKER IMAGE INFO ==="
          echo "Registry: $REGISTRY"
          echo "Image Name: $IMAGE_NAME"
          echo "Latest Tag: $IMAGE_TAG"
          echo "Versioned Tag: $VERSIONED_TAG"
          echo "Latest Image: $LATEST_IMAGE"
          echo "Versioned Image: $VERSIONED_IMAGE"
          echo "========================="

      - name: Send Webhook with Latest Package
        run: |
          echo "üöÄ Sending webhook with latest Docker package..."
          
          # T·∫°o payload v·ªõi th√¥ng tin Docker package ƒë√£ build xong
          PAYLOAD=$(cat <<EOF
          {
            "ref": "${{ github.ref }}",
            "repository": {
              "name": "${{ github.event.repository.name }}",
              "full_name": "${{ github.repository }}",
              "html_url": "${{ github.event.repository.html_url }}",
              "clone_url": "${{ github.event.repository.clone_url }}",
              "default_branch": "${{ github.event.repository.default_branch }}"
            },
            "pusher": {
              "name": "${{ github.event.pusher.name || github.actor }}",
              "email": "${{ github.event.pusher.email || github.actor }}@users.noreply.github.com"
            },
            "head_commit": {
              "id": "${{ github.sha }}",
              "message": "${{ github.event.head_commit.message || 'Manual deployment' }}",
              "timestamp": "${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}",
              "url": "${{ github.event.head_commit.url || github.event.repository.html_url }}/commit/${{ github.sha }}",
              "author": {
                "name": "${{ github.event.head_commit.author.name || github.actor }}",
                "email": "${{ github.event.head_commit.author.email || github.actor }}@users.noreply.github.com"
              }
            },
            "docker": {
              "registry": "${{ steps.image_info.outputs.registry }}",
              "image_name": "${{ steps.image_info.outputs.image_name }}",
              "latest_tag": "${{ steps.image_info.outputs.image_tag }}",
              "versioned_tag": "${{ steps.image_info.outputs.versioned_tag }}",
              "latest_image": "${{ steps.image_info.outputs.latest_image }}",
              "versioned_image": "${{ steps.image_info.outputs.versioned_image }}",
              "pull_command": "docker pull ${{ steps.image_info.outputs.latest_image }}",
              "build_completed": true,
              "build_timestamp": "${{ github.event.repository.updated_at }}"
            },
            "deployment": {
              "environment": "${{ github.ref_name == 'main' && 'production' || 'staging' }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "timestamp": "${{ github.event.repository.updated_at }}",
              "ready_to_deploy": true
            }
          }
          EOF
          )
          
          # Minify JSON
          PAYLOAD=$(echo "$PAYLOAD" | jq -c .)
          
          echo "=== PAYLOAD (PACKAGE ƒê√É BUILD XONG) ==="
          echo "$PAYLOAD" | jq .
          echo "======================================="
          
          # Generate signature
          WEBHOOK_SECRET="du_an_cua_tuan"
          WEBHOOK_URL="https://webhook1.iceteadev.site/deploy"
          
          echo -n "$PAYLOAD" > payload.json
          SIGNATURE_HASH=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | cut -d' ' -f2)
          SIGNATURE="sha256=$SIGNATURE_HASH"
          
          echo "=== SENDING WEBHOOK ==="
          echo "URL: $WEBHOOK_URL"
          echo "Docker Package: ${{ steps.image_info.outputs.latest_image }}"
          echo "Package Status: ‚úÖ BUILT & READY"
          echo "======================="
          
          # Send webhook
          DELIVERY_ID="github-actions-$(date +%s)"
          RESPONSE=$(curl -w "\n%{http_code}" -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: $SIGNATURE" \
            -H "X-GitHub-Event: push" \
            -H "X-GitHub-Delivery: $DELIVERY_ID" \
            -H "User-Agent: GitHub-Hookshot/actions" \
            -d "$PAYLOAD")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "=== RESPONSE ==="
          echo "Status: $HTTP_CODE"
          echo "Body: $BODY"
          echo "================"
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Webhook sent successfully!"
            echo "üê≥ Docker Package: ${{ steps.image_info.outputs.latest_image }}"
            echo "üì¶ Status: READY TO DEPLOY"
          else
            echo "‚ùå Webhook failed!"
            exit 1
          fi

  # Deployment is handled by webhook above (after docker build)
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [build, docker-build]
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   environment: staging
  #   steps:
  #     - name: Deploy via Webhook
  #       uses: distributhor/workflow-webhook@v3
  #       with:
  #         webhook_url: ${{ secrets.WEBHOOK_URL || 'https://webhook1.iceteadev.site/deploy' }}
  #         webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
  #         data: |
  #           {
  #             "environment": "staging",
  #             "repository": "${{ github.repository }}",
  #             "branch": "${{ github.ref_name }}",
  #             "commit": "${{ github.sha }}",
  #             "image_tag": "${{ github.ref_name }}-${{ github.sha }}"
  #           }

  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [build, docker-build]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production
  #   steps:
  #     - name: Deploy via Webhook
  #       uses: distributhor/workflow-webhook@v3
  #       with:
  #         webhook_url: ${{ secrets.WEBHOOK_URL || 'https://webhook1.iceteadev.site/deploy' }}
  #         webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
  #         data: |
  #           {
  #             "environment": "production",
  #             "repository": "${{ github.repository }}",
  #             "branch": "${{ github.ref_name }}",
  #             "commit": "${{ github.sha }}",
  #             "image_tag": "latest"
  #           }

  # ===== WEBHOOK TEST =====

  webhook-test:
    name: Test Webhook Connection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test webhook connectivity
        run: |
          # Create test payload
          TEST_PAYLOAD='{"test": "connectivity"}'
          echo "$TEST_PAYLOAD" > test_payload.json
          
          # Generate signature
          SIGNATURE=$(openssl dgst -sha256 -hmac '${{ secrets.WEBHOOK_SECRET }}' test_payload.json | cut -d' ' -f2)
          
          # Test webhook
          curl -f -X POST ${{ secrets.WEBHOOK_URL || 'https://webhook1.iceteadev.site/deploy' }} \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
            -H "X-GitHub-Event: ping" \
            -H "X-GitHub-Delivery: test-${{ github.run_id }}" \
            -H "User-Agent: GitHub-Hookshot/test" \
            -d @test_payload.json \
            || echo "Webhook test failed - this is expected if webhook is not configured yet"
          
          # Cleanup
          rm -f test_payload.json 